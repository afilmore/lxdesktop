/* fmcore.vapi generated by vapigen, do not modify. */

namespace Fm {
    
    [CCode (cheader_filename = "libfmcore.h")]
	public class CellRendererPixbuf : Gtk.CellRendererPixbuf {
		public weak Fm.FileInfo fi;
		public int fixed_h;
		public int fixed_w;
		[CCode (has_construct_function = false, type = "GtkCellRenderer*")]
		public CellRendererPixbuf ();
		public void set_fixed_size (int w, int h);
		[NoAccessorMethod]
		public void* info { get; set; }
	}
	
    [CCode (cheader_filename = "libfmcore.h")]
	public class DeepCountJob : Fm.Job {
		public uint count;
		public int dest_dev;
		public weak string dest_fs_id;
		public int flags;
		public weak Fm.PathList paths;
		public int64 total_block_size;
		public int64 total_size;
		[CCode (has_construct_function = false, type = "FmJob*")]
		public DeepCountJob (Fm.PathList paths, int flags);
		public void set_dest (int dev, string fs_id);
	}
	
    [CCode (cheader_filename = "libfmcore.h")]
	public class DirListJob : Fm.Job {
		public weak Fm.FileInfo dir_fi;
		public bool dir_only;
		public weak Fm.Path dir_path;
		public weak Fm.FileInfoList files;
		[CCode (has_construct_function = false, type = "FmJob*")]
		public DirListJob (Fm.Path path, bool dir_only);
		[CCode (has_construct_function = false, type = "FmJob*")]
		public DirListJob.for_gfile (GLib.File gf);
	}

	[CCode (cheader_filename = "libfmcore.h")]
	public class DummyMonitor : GLib.FileMonitor {
		[CCode (has_construct_function = false, type = "GFileMonitor*")]
		public DummyMonitor ();
	}
	
	[CCode (cheader_filename = "libfmcore.h")]
	public class FileInfoJob : Fm.Job {
		public weak Fm.Path current;
		public weak Fm.FileInfoList file_infos;
		public int flags;
		[CCode (has_construct_function = false, type = "FmJob*")]
		public FileInfoJob (Fm.PathList files_to_query, int flags);
		public void add (Fm.Path path);
		public void add_gfile (GLib.File gf);
		public unowned Fm.Path get_current ();
	}

	[CCode (cheader_filename = "libfmcore.h")]
	[Compact]
	public class FileLauncher {
		public weak GLib.Callback ask;
		public weak GLib.Callback error;
		public weak GLib.Callback exec_file;
		public weak GLib.Callback get_app;
		public weak GLib.Callback open_folder;
	}

	[CCode (cheader_filename = "libfmcore.h")]
	public class Job : GLib.Object {
		public weak GLib.Cancellable cancellable;
		public weak GLib.Cond cond;
		public weak GLib.Mutex mutex;
		public bool running;
		[CCode (has_construct_function = false)]
		protected Job ();
		public int ask (string question);
		public int ask_valist (string question, void* options);
		public int askv (string question, out unowned string options);
		public void* call_main_thread (Fm.JobCallMainThreadFunc func);
		public virtual void cancel ();
		public void emit_cancelled ();
		public int emit_error (GLib.Error err, int severity);
		public void emit_finished ();
		public void finish ();
		public unowned GLib.Cancellable get_cancellable ();
		public void init_cancellable ();
		public bool is_cancelled ();
		public bool is_running ();
		[NoWrapper]
		public virtual bool run ();
		public virtual bool run_async ();
		public bool run_sync ();
		public bool run_sync_with_mainloop ();
		public void set_cancellable (GLib.Cancellable cancellable);
		public virtual signal int ask2 (void* question, void* options);
		public virtual signal void cancelled ();
		public virtual signal int error (void* err, int severity);
		public virtual signal void finished ();
	}

	[CCode (cheader_filename = "libfmcore.h", ref_function = "fm_list_ref", unref_function = "fm_list_unref")]
	[Compact]
	public class List {
		public weak Fm.ListFuncs funcs;
		public weak GLib.Queue list;
		public int n_ref;
		[CCode (has_construct_function = false)]
		public List (Fm.ListFuncs funcs);
		public static void clear (void* list);
		public static void delete_link (void* list, void* l_);
		public bool is_file_info_list ();
		public bool is_path_list ();
		public static void remove (void* list, void* data);
		public static void remove_all (void* list, void* data);
	}

	[CCode (cheader_filename = "libfmcore.h")]
	[Compact]
	public class ListFuncs {
		public weak GLib.Callback item_ref;
		public weak GLib.Callback item_unref;
	}

	[CCode (cheader_filename = "libfmcore.h")]
	[Compact]
	public class PathList {
		[CCode (has_construct_function = false)]
		public PathList ();
		[CCode (has_construct_function = false)]
		public PathList.from_file_info_glist (GLib.List fis);
		[CCode (has_construct_function = false)]
		public PathList.from_file_info_gslist (GLib.SList fis);
		[CCode (has_construct_function = false)]
		public PathList.from_file_info_list (Fm.List fis);
		[CCode (has_construct_function = false)]
		public PathList.from_uri_list (string uri_list);
		[CCode (has_construct_function = false)]
		public PathList.from_uris (out unowned string uris);
		public unowned string to_uri_list ();
		public void write_uri_list (GLib.StringBuilder buf);
	}

	[CCode (cheader_filename = "libfmcore.h")]
	public class SimpleJob : Fm.Job {
		public weak GLib.DestroyNotify destroy_data;
		public weak Fm.SimpleJobFunc func;
		public void* user_data;
		[CCode (has_construct_function = false, type = "FmJob*")]
		public SimpleJob (Fm.SimpleJobFunc func, GLib.DestroyNotify destroy_data);
	}

	[CCode (cheader_filename = "libfmcore.h")]
	[Compact]
	public class ThumbnailRequest {
		public void cancel ();
		public unowned Fm.FileInfo get_file_info ();
		public unowned Gdk.Pixbuf get_pixbuf ();
		public uint get_size ();
	}

	[CCode (cheader_filename = "libfmcore.h")]
	public delegate void* JobCallMainThreadFunc (Fm.Job job);

	[CCode (cheader_filename = "libfmcore.h", has_target = false)]
	public delegate bool LaunchFolderFunc (GLib.AppLaunchContext ctx, GLib.List folder_infos, void* user_data) throws GLib.Error;

	[CCode (cheader_filename = "libfmcore.h", has_target = false)]
	public delegate bool SimpleJobFunc (Fm.SimpleJob p1, void* p2);

	[CCode (cheader_filename = "libfmcore.h", has_target = false)]
	public delegate void ThumbnailReadyCallback (Fm.ThumbnailRequest p1, void* p2);

	[CCode (cheader_filename = "libfmcore.h")]
	public static unowned GLib.List app_chooser_combo_box_get_custom_apps (Gtk.ComboBox combo);

	[CCode (cheader_filename = "libfmcore.h")]
	public static unowned GLib.AppInfo app_chooser_combo_box_get_selected (Gtk.ComboBox combo, bool is_sel_changed);

	[CCode (cheader_filename = "libfmcore.h")]
	public static void app_chooser_combo_box_setup (Gtk.ComboBox combo, Fm.MimeType mime_type, GLib.List apps, GLib.AppInfo sel);

	[CCode (cheader_filename = "libfmcore.h")]
	public static unowned GLib.AppInfo app_chooser_dlg_get_selected_app (Gtk.Dialog dlg, bool set_default);

	[CCode (cheader_filename = "libfmcore.h")]
	public static unowned Gtk.Widget app_chooser_dlg_new (Fm.MimeType mime_type, bool can_set_default);

	[CCode (cheader_filename = "libfmcore.h")]
	public static unowned GLib.AppInfo app_info_create_from_commandline (string commandline, string application_name, GLib.AppInfoCreateFlags flags) throws GLib.Error;

	[CCode (cheader_filename = "libfmcore.h")]
	public static bool app_info_launch (GLib.AppInfo appinfo, GLib.List files, GLib.AppLaunchContext launch_context) throws GLib.Error;

	[CCode (cheader_filename = "libfmcore.h")]
	public static bool app_info_launch_default_for_uri (string uri, GLib.AppLaunchContext launch_context) throws GLib.Error;

	[CCode (cheader_filename = "libfmcore.h")]
	public static bool app_info_launch_uris (GLib.AppInfo appinfo, GLib.List uris, GLib.AppLaunchContext launch_context) throws GLib.Error;

	[CCode (cheader_filename = "libfmcore.h")]
	public static unowned GLib.AppInfo app_menu_view_get_selected_app (Gtk.TreeView view);

	[CCode (cheader_filename = "libfmcore.h")]
	public static unowned string app_menu_view_get_selected_app_desktop_file (Gtk.TreeView view);

	[CCode (cheader_filename = "libfmcore.h")]
	public static unowned string app_menu_view_get_selected_app_desktop_id (Gtk.TreeView view);

	[CCode (cheader_filename = "libfmcore.h")]
	public static bool app_menu_view_is_app_selected (Gtk.TreeView view);

	[CCode (cheader_filename = "libfmcore.h")]
	public static bool app_menu_view_is_item_app (Gtk.TreeView view, Gtk.TreeIter it);

	[CCode (cheader_filename = "libfmcore.h")]
	public static unowned Gtk.Widget app_menu_view_new ();

	[CCode (cheader_filename = "libfmcore.h")]
	public static int askv (Gtk.Window parent, string title, string question, out unowned string options);

	[CCode (cheader_filename = "libfmcore.h")]
	public static unowned string canonicalize_filename (string filename, string cwd);

	[CCode (cheader_filename = "libfmcore.h")]
	public static unowned GLib.AppInfo choose_app_for_mime_type (Gtk.Window parent, Fm.MimeType mime_type, bool can_set_default);

	[CCode (cheader_filename = "libfmcore.h")]
	public static unowned Fm.FileInfoList dir_dist_job_get_files (Fm.DirListJob job);

	[CCode (cheader_filename = "libfmcore.h")]
	public static unowned string file_size_to_str (string buf, int64 size, bool si_prefix);

	[CCode (cheader_filename = "libfmcore.h")]
	public static bool key_file_get_bool (GLib.KeyFile kf, string grp, string key, bool val);

	[CCode (cheader_filename = "libfmcore.h")]
	public static bool key_file_get_int (GLib.KeyFile kf, string grp, string key, int val);

	[CCode (cheader_filename = "libfmcore.h")]
	public static bool launch_desktop_entry (GLib.AppLaunchContext ctx, string file_or_id, GLib.List uris, Fm.FileLauncher launcher);

	[CCode (cheader_filename = "libfmcore.h")]
	public static bool launch_file_simple (Gtk.Window parent, GLib.AppLaunchContext ctx, Fm.FileInfo file_info, Fm.LaunchFolderFunc func);

	[CCode (cheader_filename = "libfmcore.h")]
	public static bool launch_files (GLib.AppLaunchContext ctx, GLib.List file_infos, Fm.FileLauncher launcher);

	[CCode (cheader_filename = "libfmcore.h")]
	public static bool launch_files_simple (Gtk.Window parent, GLib.AppLaunchContext ctx, GLib.List file_infos, Fm.LaunchFolderFunc func);

	[CCode (cheader_filename = "libfmcore.h")]
	public static bool launch_path_simple (Gtk.Window parent, GLib.AppLaunchContext ctx, Fm.Path path, Fm.LaunchFolderFunc func);

	[CCode (cheader_filename = "libfmcore.h")]
	public static bool launch_paths (GLib.AppLaunchContext ctx, GLib.List paths, Fm.FileLauncher launcher);

	[CCode (cheader_filename = "libfmcore.h")]
	public static bool launch_paths_simple (Gtk.Window parent, GLib.AppLaunchContext ctx, GLib.List paths, Fm.LaunchFolderFunc func);

	[CCode (cheader_filename = "libfmcore.h")]
	public static void marshal_INT__POINTER_INT (GLib.Closure closure, GLib.Value return_value, uint n_param_values, GLib.Value param_values, void* invocation_hint, void* marshal_data);

	[CCode (cheader_filename = "libfmcore.h")]
	public static void marshal_INT__POINTER_POINTER (GLib.Closure closure, GLib.Value return_value, uint n_param_values, GLib.Value param_values, void* invocation_hint, void* marshal_data);

	[CCode (cheader_filename = "libfmcore.h")]
	public static void marshal_INT__POINTER_POINTER_POINTER (GLib.Closure closure, GLib.Value return_value, uint n_param_values, GLib.Value param_values, void* invocation_hint, void* marshal_data);

	[CCode (cheader_filename = "libfmcore.h")]
	public static unowned GLib.FileMonitor monitor_directory (GLib.File gf) throws GLib.Error;

	[CCode (cheader_filename = "libfmcore.h")]
	public static unowned GLib.FileMonitor monitor_lookup_dummy_monitor (GLib.File gf);

	[CCode (cheader_filename = "libfmcore.h")]
	public static unowned GLib.FileMonitor monitor_lookup_monitor (GLib.File gf);

	[CCode (cheader_filename = "libfmcore.h")]
	public static void show_error (Gtk.Window parent, string title, string msg);

	[CCode (cheader_filename = "libfmcore.h")]
	public static unowned string str_replace (string str, string old, string @new);

	[CCode (cheader_filename = "libfmcore.h")]
	public static unowned Fm.ThumbnailRequest thumbnail_request (Fm.FileInfo src_file, uint size, Fm.ThumbnailReadyCallback callback);
}
